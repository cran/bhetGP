// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// diag_quad_mat
NumericVector diag_quad_mat(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _bhetGP_diag_quad_mat(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_quad_mat(A, B));
    return rcpp_result_gen;
END_RCPP
}
// Exp2
arma::mat Exp2(arma::mat distmat, const double tau2, const double theta, const double g);
RcppExport SEXP _bhetGP_Exp2(SEXP distmatSEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Exp2(distmat, tau2, theta, g));
    return rcpp_result_gen;
END_RCPP
}
// Exp2vec
arma::mat Exp2vec(arma::mat distmat, const double tau2, const double theta, const arma::vec g);
RcppExport SEXP _bhetGP_Exp2vec(SEXP distmatSEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Exp2vec(distmat, tau2, theta, g));
    return rcpp_result_gen;
END_RCPP
}
// Exp2Sep
arma::mat Exp2Sep(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const double g);
RcppExport SEXP _bhetGP_Exp2Sep(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Exp2Sep(x1, x2, tau2, theta, g));
    return rcpp_result_gen;
END_RCPP
}
// Exp2SepVec
arma::mat Exp2SepVec(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const arma::vec g);
RcppExport SEXP _bhetGP_Exp2SepVec(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Exp2SepVec(x1, x2, tau2, theta, g));
    return rcpp_result_gen;
END_RCPP
}
// Matern
arma::mat Matern(arma::mat distmat, const double tau2, const double theta, const double g, const double v);
RcppExport SEXP _bhetGP_Matern(SEXP distmatSEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Matern(distmat, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// MaternSep
arma::mat MaternSep(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const double g, const double v);
RcppExport SEXP _bhetGP_MaternSep(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MaternSep(x1, x2, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// MaternVec
arma::mat MaternVec(arma::mat distmat, const double tau2, const double theta, const arma::vec g, const double v);
RcppExport SEXP _bhetGP_MaternVec(SEXP distmatSEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MaternVec(distmat, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// MaternSepVec
arma::mat MaternSepVec(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const arma::vec g, const double v);
RcppExport SEXP _bhetGP_MaternSepVec(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MaternSepVec(x1, x2, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// MaternProdSep
arma::mat MaternProdSep(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const double g, const double v);
RcppExport SEXP _bhetGP_MaternProdSep(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MaternProdSep(x1, x2, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// MaternProdSepVec
arma::mat MaternProdSepVec(arma::mat x1, arma::mat x2, const double tau2, const arma::vec theta, const arma::vec g, const double v);
RcppExport SEXP _bhetGP_MaternProdSepVec(SEXP x1SEXP, SEXP x2SEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MaternProdSepVec(x1, x2, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// forward_solve_raw
NumericVector forward_solve_raw(NumericMatrix U, NumericVector z, NumericMatrix NNarray);
RcppExport SEXP _bhetGP_forward_solve_raw(SEXP USEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_solve_raw(U, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// rev_matrix
arma::mat rev_matrix(arma::mat x);
RcppExport SEXP _bhetGP_rev_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rev_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// U_entries_Hom
arma::mat U_entries_Hom(const int Ncores, const arma::mat& x, const arma::umat& revNNarray, const double tau2, const double theta, const double g, const double v);
RcppExport SEXP _bhetGP_U_entries_Hom(SEXP NcoresSEXP, SEXP xSEXP, SEXP revNNarraySEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Ncores(NcoresSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type revNNarray(revNNarraySEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(U_entries_Hom(Ncores, x, revNNarray, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// U_entries
arma::mat U_entries(const int Ncores, const arma::mat& x, const arma::umat& revNNarray, const double tau2, const double theta, const arma::vec g, const double v);
RcppExport SEXP _bhetGP_U_entries(SEXP NcoresSEXP, SEXP xSEXP, SEXP revNNarraySEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Ncores(NcoresSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type revNNarray(revNNarraySEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(U_entries(Ncores, x, revNNarray, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// U_entries_sep_Hom
arma::mat U_entries_sep_Hom(const int Ncores, const arma::mat& x, const arma::umat& revNNarray, const double tau2, const arma::vec theta, const double g, const double v);
RcppExport SEXP _bhetGP_U_entries_sep_Hom(SEXP NcoresSEXP, SEXP xSEXP, SEXP revNNarraySEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Ncores(NcoresSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type revNNarray(revNNarraySEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(U_entries_sep_Hom(Ncores, x, revNNarray, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// U_entries_sep
arma::mat U_entries_sep(const int Ncores, const arma::mat& x, const arma::umat& revNNarray, const double tau2, const arma::vec theta, const arma::vec g, const double v);
RcppExport SEXP _bhetGP_U_entries_sep(SEXP NcoresSEXP, SEXP xSEXP, SEXP revNNarraySEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP gSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Ncores(NcoresSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type revNNarray(revNNarraySEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(U_entries_sep(Ncores, x, revNNarray, tau2, theta, g, v));
    return rcpp_result_gen;
END_RCPP
}
// check_omp
void check_omp();
RcppExport SEXP _bhetGP_check_omp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    check_omp();
    return R_NilValue;
END_RCPP
}
// check_cores
int check_cores(const int Ncores);
RcppExport SEXP _bhetGP_check_cores(SEXP NcoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Ncores(NcoresSEXP);
    rcpp_result_gen = Rcpp::wrap(check_cores(Ncores));
    return rcpp_result_gen;
END_RCPP
}
// row_col_pointers
arma::mat row_col_pointers(const arma::umat& NNarray);
RcppExport SEXP _bhetGP_row_col_pointers(SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(row_col_pointers(NNarray));
    return rcpp_result_gen;
END_RCPP
}

extern "C" {
#include <stdlib.h>
#include <R_ext/Rdynload.h>
  extern void inv_det_R(void *, void *, void *, void *);
  extern void distance_R(void *, void *, void *, void *, void *, void *);
  extern void distance_symm_R(void *, void *, void *, void *);
  
  static const R_CMethodDef CEntries[] = {
    {"inv_det_R",         (DL_FUNC) &inv_det_R,         4},
    {"distance_R",        (DL_FUNC) &distance_R,        6},
    {"distance_symm_R",   (DL_FUNC) &distance_symm_R,   4},
    {NULL, NULL, 0}
  };
}

static const R_CallMethodDef CallEntries[] = {
  {"_bhetGP_diag_quad_mat", (DL_FUNC) &_bhetGP_diag_quad_mat, 2},
  {"_bhetGP_Exp2", (DL_FUNC) &_bhetGP_Exp2, 4},
  {"_bhetGP_Exp2vec", (DL_FUNC) &_bhetGP_Exp2vec, 4},
  {"_bhetGP_Exp2Sep", (DL_FUNC) &_bhetGP_Exp2Sep, 5},
  {"_bhetGP_Exp2SepVec", (DL_FUNC) &_bhetGP_Exp2SepVec, 5},
  {"_bhetGP_Matern", (DL_FUNC) &_bhetGP_Matern, 5},
  {"_bhetGP_MaternSep", (DL_FUNC) &_bhetGP_MaternSep, 6},
  {"_bhetGP_MaternVec", (DL_FUNC) &_bhetGP_MaternVec, 5},
  {"_bhetGP_MaternSepVec", (DL_FUNC) &_bhetGP_MaternSepVec, 6},
  {"_bhetGP_MaternProdSep", (DL_FUNC) &_bhetGP_MaternProdSep, 6},
  {"_bhetGP_MaternProdSepVec", (DL_FUNC) &_bhetGP_MaternProdSepVec, 6},
  {"_bhetGP_forward_solve_raw", (DL_FUNC) &_bhetGP_forward_solve_raw, 3},
  {"_bhetGP_rev_matrix", (DL_FUNC) &_bhetGP_rev_matrix, 1},
  {"_bhetGP_U_entries_Hom", (DL_FUNC) &_bhetGP_U_entries_Hom, 7},
  {"_bhetGP_U_entries", (DL_FUNC) &_bhetGP_U_entries, 7},
  {"_bhetGP_U_entries_sep_Hom", (DL_FUNC) &_bhetGP_U_entries_sep_Hom, 7},
  {"_bhetGP_U_entries_sep", (DL_FUNC) &_bhetGP_U_entries_sep, 7},
  {"_bhetGP_check_omp", (DL_FUNC) &_bhetGP_check_omp, 0},
  {"_bhetGP_check_cores", (DL_FUNC) &_bhetGP_check_cores, 1},
  {"_bhetGP_row_col_pointers", (DL_FUNC) &_bhetGP_row_col_pointers, 1},
  {NULL, NULL, 0}
};

RcppExport void R_init_bhetGP(DllInfo *dll) {
  R_registerRoutines(dll, CEntries, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
